using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Garnet;

[Generator]
public class EnumsSourceGenerator : IIncrementalGenerator
{
    const string GeneratedClassName = "EnumUtils";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enumDetails = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => node is EnumDeclarationSyntax enumDeclarationSyntax
                    && enumDeclarationSyntax.AttributeLists.Any(al => al.Attributes.Any(a => a.Name.ToString() == "GenerateEnumDescriptionUtils")),
                transform: static (ctx, _) => TransformEnumDetails((EnumDeclarationSyntax)ctx.Node, ctx.SemanticModel)
            );

        var enumUtils = enumDetails.Select((details, _) => Execute(details));

        context.RegisterSourceOutput(enumUtils, (ctx, source) => ctx.AddSource($"{GeneratedClassName}.{source.EnumName}.g.cs", source.ClassSource));
    }

    private static EnumDetails TransformEnumDetails(EnumDeclarationSyntax enumDeclaration, SemanticModel semanticModel)
    {
        var namespaceDeclaration = enumDeclaration.FirstAncestorOrSelf<NamespaceDeclarationSyntax>();
        var enumName = enumDeclaration.Identifier.Text;

        var values = enumDeclaration.Members
            .Select(m => (
                m.Identifier.Text,
                semanticModel.GetOperation(m.EqualsValue!.Value)!.ConstantValue.Value,
                Description: m.AttributeLists
                    .SelectMany(al => al.Attributes).Where(a => a.Name.ToString() == "Description")
                    .SingleOrDefault()
            ))
            .ToList();
        return new EnumDetails(namespaceDeclaration!.Name.ToString(), enumName, values);
    }

    private static (string EnumName, string ClassSource) Execute(EnumDetails details)
    {
        var classBuilder = new StringBuilder();
        classBuilder.AppendLine("// <auto-generated>");
        classBuilder.AppendLine($"// This code was generated by the {nameof(EnumsSourceGenerator)} source generator.");
        classBuilder.AppendLine("// </auto-generated>");

        classBuilder.AppendLine("using System;");
        classBuilder.AppendLine("using System.ComponentModel;");
        classBuilder.AppendLine("using System.Numerics;");
        classBuilder.AppendLine($"using {details.Namespace};");
        classBuilder.AppendLine();
        classBuilder.AppendLine("namespace Garnet.common;");
        classBuilder.AppendLine();
        classBuilder.AppendLine("/// <summary>");
        classBuilder.AppendLine($"/// Utility methods for enums.");
        classBuilder.AppendLine("/// </summary>");
        classBuilder.AppendLine($"public static partial class {GeneratedClassName}");
        classBuilder.AppendLine("{");
        classBuilder.AppendLine(GenerateTryParseEnumFromDescriptionMethod(details.EnumName, details.Values));
        classBuilder.AppendLine();
        classBuilder.AppendLine(GenerateGetEnumDescriptionsMethod(details.EnumName, details.Values));
        classBuilder.AppendLine("}");

        var classSource = classBuilder.ToString();
        return (details.EnumName, classSource);
    }

    private static string GenerateTryParseEnumFromDescriptionMethod(string enumName, List<(string Name, object? Value, AttributeSyntax Description)> values)
    {
        var method = new StringBuilder();
        method.AppendLine($"    /// <summary>");
        method.AppendLine($"    /// Tries to parse the enum value from the description.");
        method.AppendLine($"    /// </summary>");
        method.AppendLine($"    /// <param name=\"description\">Enum description.</param>");
        method.AppendLine($"    /// <param name=\"result\">Enum value.</param>");
        method.AppendLine($"    /// <returns>True if successful.</returns>");
        method.AppendLine($"    public static bool TryParse{enumName}FromDescription(string description, out {enumName} result)");
        method.AppendLine("    {");
        method.AppendLine("        result = default;");
        method.AppendLine("        switch (description)");
        method.AppendLine("        {");
        foreach (var (name, _, description) in values)
        {
            bool hasDescription = false;
            var descriptionValue = description?.ArgumentList?.Arguments.FirstOrDefault()?.ToString();
            if (descriptionValue is not null)
            {
                hasDescription = true;
                method.AppendLine($"            case {descriptionValue}:");
            }

            if (!hasDescription) continue;
            method.AppendLine($"                result = {enumName}.{name};");
            method.AppendLine("                return true;");
        }
        method.AppendLine("        }");
        method.AppendLine();
        method.AppendLine("        return false;");
        method.AppendLine("    }");
        method.AppendLine();

        return method.ToString();
    }

    private static string GenerateGetEnumDescriptionsMethod(string enumName, List<(string Name, object? Value, AttributeSyntax Description)> values)
    {
        var method = new StringBuilder();
        method.AppendLine($"    /// <summary>");
        method.AppendLine($"    /// Gets the descriptions of the set flags. Assumes the enum is a flags enum.");
        method.AppendLine($"    /// If no description exists, returns the ToString() value of the input value.");
        method.AppendLine($"    /// </summary>");
        method.AppendLine($"    /// <param name=\"value\">Enum value.</param>");
        method.AppendLine($"    /// <returns>Array of descriptions.</returns>");
        method.AppendLine($"    public static string[] Get{enumName}Descriptions({enumName} value)");
        method.AppendLine("    {");
        foreach (var (name, value, description) in values)
        {
            if (!IsPow2(value))
            {
                var toString = description?.ArgumentList?.Arguments.FirstOrDefault()?.ToString() ?? $"\"{name}\"";
                method.AppendLine($"        if (value is {enumName}.{name}) return [{toString}];");
            }
        }
        method.AppendLine("        var setFlags = BitOperations.PopCount((ulong)value);");
        method.AppendLine("        if (setFlags == 1)");
        method.AppendLine("        {");
        method.AppendLine("            return value switch");
        method.AppendLine("            {");
        foreach (var (name, value, description) in values)
        {
            if (description is null) continue;
            if (!IsPow2(value)) continue;
            method.AppendLine($"                {enumName}.{name} => [{description?.ArgumentList?.Arguments.FirstOrDefault()?.ToString()}],");
        }
        method.AppendLine($"                _ => [value.ToString()],");
        method.AppendLine("            };");
        method.AppendLine("        }");
        method.AppendLine();
        method.AppendLine("        var descriptions = new string[setFlags];");
        method.AppendLine("        var index = 0;");
        foreach (var (name, value, description) in values)
        {
            if (description is null) continue;
            if (!IsPow2(value)) continue;
            method.AppendLine($"        if ((value & {enumName}.{name}) != 0) descriptions[index++] = {description.ArgumentList?.Arguments.FirstOrDefault()?.ToString()};");
        }
        method.AppendLine();
        method.AppendLine("        return descriptions;");
        method.AppendLine("    }");

        return method.ToString();
    }

    static bool IsPow2(object? value)
    {
        if (value is int x) return x != 0 && (x & (x - 1)) == 0;
        return false;
    }

    private record struct EnumDetails(string Namespace, string EnumName, List<(string Name, object? Value, AttributeSyntax Description)> Values);
}